// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["fullTextSearch", "fullTextIndex", "jsonProtocol"]
}

datasource db {
//   provider = "postgresql"
    // provider = "mysql"
//   provider = "cockroachdb"
//   url = env("DATABASE_URL")
//   relationMode = "prisma"


    // Supabase with prisma
    provider          = "postgresql"
    url               = env("DATABASE_URL")
    directUrl         = env("DIRECT_URL")
}

// datasource db {
//   provider = "postgresql"
//   url = env("POSTGRES_PRISMA_URL") // uses connection pooling
//   directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
//   shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
// }

enum Role {
  USER
  PRO
  PRO_PLUS
  BIG_DECK_ENERGY
  EDITOR
  ADMIN
}

enum StripeSubscriptionStatus {
    incomplete
    incomplete_expired
    trialing
    active
    past_due
    canceled
    unpaid
    paused
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    username      String?
    image         String?
    bio           String?
    stripeCustomerId         String?
    stripeSubscriptionId     String?
    stripeSubscriptionStatus StripeSubscriptionStatus?
    role          Role @default(USER)
    
    supporter Supporter?

    apps         App[]
    recentApps   UserActionApp[]
    bootVideos   BootVideo[]
    games   Game[]
    launcherCredentials UserLauncherCredential[]
    appPlatforms   UserAppPlatform[]
    modOwner   GameMod[]
    
}

model StripeEvent {
    id               String   @id @unique
    api_version      String?
    data             Json
    request          Json?
    type             String
    object           String
    account          String?
    created          DateTime
    livemode         Boolean
    pending_webhooks Int
}

model UserActionApp {
    user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId  String
    app     App    @relation(fields: [appId], references: [id], onDelete: Cascade)
    appId   String
    recentAt DateTime?
    favoritedAt DateTime?
    hideAt DateTime?
    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())

    @@id([userId, appId])
}

model UserAppPlatform {
    name   String
    user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId  String
    app     App    @relation(fields: [appId], references: [id], onDelete: Cascade)
    appId   String
    platform Platform @default(OTHER)
    installedAt DateTime?
    runningAt  DateTime?
    updatingAt DateTime?
    addedToSteamAt DateTime?
    // stripeCustomerId String?   @unique
    // stripeSubId      String?
    // currentVersion     AppVersion    @relation(fields: [currentVersionId], references: [], onDelete: Cascade)
    // currentVersionId String?
    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())

    @@id([userId, platform])
}

enum AppType {
    GAME
    APP
    TOOL
    MOD
    EMULATOR
    BOOT_VIDEO    
}

enum AppStatus {
    PUBLISHED
    HIDDEN
    BETA
    ALPHA
    DEV
    PREVIEW
    PERSONAL
    IN_REVIEW
    DRAFT
    REJECTED    
    DELETED    
}

model Launcher {
    id      String @id @default(cuid())
    name    String
    url     String
    description String?
    iconUrl    String?
    coverUrl    String?
    company String?
    companyUrl String?
    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())
    type    AppStatus @default(DRAFT)
    typeAt DateTime @default(now())
    category String @default("Games")
    userLauncherCredentials UserLauncherCredential[]
}

model UserLauncherCredential {
    id      String @id @default(cuid())
    user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId  String
    launcher Launcher @relation(fields: [launcherId], references: [id], onDelete: Cascade)
    launcherId String
    expires_in Int?
    access_token String?
    refresh_token String?
    user_id String?
    loginTime Int?
    error String?
    username String?
    password String?
}

enum AppStore {
    STEAM
    GOG
    EPIC
    ORIGIN
    UPLAY
    FLATPAK
    SNAP
    PACMAN
    OTHER 
}

enum AppRunnerType {
    EXE
    MSI
    DMG
    DEB
    RPM
    WEB
    FLATPAK
    APPIMAGE
    UNKNOWN
    BASH
}

enum Platform {
    WINDOWS
    LINUX
    STEAMOS
    MAC
    ANDROID
    IOS
    WEB
    OTHER
}

model AppVersion {
    id      String @id @default(cuid())
    version String @default("0.0.0")
    sourceUrl     String 
    name     String?
    uninstallUrl     String? 
    app     App    @relation(fields: [appId], references: [id], onDelete: Cascade)
    appId   String
    duration Int @default(0)
    size Int @default(0)
    sha256 String?
    store AppStore?
    storeUrl String?
    platform Platform @default(OTHER)
    runnerType AppRunnerType @default(UNKNOWN)
    installLocation String?
    runnerLocation String?
    saveLocation String?
    isRecommended   Boolean @default(false)
    status AppStatus @default(DRAFT)
    changelog   String?
    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())
}

enum MediaSteamType {
    COVER
    ICON
    BANNER
    OTHER
}

enum MediaType {
    IMAGE
    VIDEO
    AUDIO
    DOCUMENT
    OTHER
}

model Media {
    id      String @id @default(cuid())
    name    String
    url     String
    description String?
    type    MediaType @default(OTHER)
    steamType MediaSteamType @default(OTHER)
    appId   String
    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())
    apps AppMedia[]
    games GameMedia[]
}

model AppMedia {
    media    Media   @relation(fields: [mediaId], references: [id], onDelete: Cascade)
    mediaId  String
    app     App    @relation(fields: [appId], references: [id], onDelete: Cascade)
    appId   String

    @@id([mediaId, appId])
}

model App {
    id      String @id @default(cuid())
    name    String
    description String?
    iconUrl    String?
    coverUrl    String?
    bannerUrl    String?
    authorName String?
    authorUrl String?
    publisherName String?
    publisherUrl String?
    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())
    owner    User?   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId  String?
    type    AppStatus? @default(DRAFT)
    typeAt DateTime @default(now())
    category String? @default("Entertainment")
    subCategory String? @default("Other")

    // Core Parts for platform
    store AppStore?
    storeUrl String?
    platform Platform @default(OTHER)
    runnerType AppRunnerType @default(UNKNOWN)
    //
    source     String? // url | File Location | Script | Id (flatpak, snap, pacman, etc)
    uninstall     String? // url | File Location | Script | Id (flatpak, snap, pacman, etc)
    installLocation String? // /home/deck/.local/share/scawp/SDSCK/
    runnerLocation String? // /home/deck/.local/share/scawp/SDSCK/zShaderCacheKiller.sh
    saveLocation String? // /home/deck/.local/share/scawp/SDSCK/Saves
    sha256 String?
    //
    appMedia AppMedia[]
    userActions   UserActionApp[]
    versions AppVersion[]
    userPlatforms   UserAppPlatform[]

    // @@fulltext([name])

}

// TODO: design emulator save and game backup and syncs
// model EmulatorGame {
//     id     String @id @default(cuid())
//     app    App    @relation(fields: [appId], references: [id], onDelete: Cascade)
//     appId  String

//     location
// }

enum BootVideoType {
    STEAM_BOOT 
    STEAM_SUSPEND
}

model BootVideo {
    id      String @id @default(cuid())
    name    String
    url     String
    description String?
    imageUrl    String?
    authorName String?
    authorUrl String?
    type   BootVideoType @default(STEAM_BOOT)
    duration Int @default(0)
    size Int @default(0)
    isBootVideo Boolean @default(true)
    isSuspendVideo Boolean @default(false)
    user    User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId  String?

    // @@fulltext([name])
}

model GameMedia {
    media    Media   @relation(fields: [mediaId], references: [id], onDelete: Cascade)
    mediaId  String
    game     Game    @relation(fields: [gameId], references: [id], onDelete: Cascade)
    gameId   String

    @@id([mediaId, gameId])
}


model GameVersion {
    id      String @id @default(cuid())
    version String @default("0.0.0")
    sourceUrl     String 
    name     String?
    uninstallUrl     String? 
    game     Game    @relation(fields: [gameId], references: [id], onDelete: Cascade)
    gameId   String
    gameMod     GameMod?    @relation(fields: [gameModId], references: [id], onDelete: Cascade)
    gameModId   String?
    duration Int @default(0)
    size Int @default(0)
    sha256 String?
    store AppStore?
    storeUrl String?
    platform Platform @default(OTHER)
    runnerType AppRunnerType @default(UNKNOWN)
    installLocation String?
    runnerLocation String?
    saveLocation String?
    isRecommended   Boolean @default(false)
    status AppStatus @default(DRAFT)
    changelog   String?
    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())
}

// TODO: Add GameMod
model GameMod {
    id      String @id @default(cuid())
    name    String
    description String?
    iconUrl    String?
    coverUrl    String?
    authorName String?
    authorUrl String?
    owner    User?   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId  String?
    game    Game?   @relation(fields: [gameId], references: [id], onDelete: Cascade)
    gameId  String?
    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())
    versions GameVersion[]
}

// Game Details from Steam, GOG, Epic, Origin, Uplay, etc

model Game {
    id      String @id @default(cuid())
    name    String
    url     String?
    description String?
    iconUrl    String?
    coverUrl    String?
    bannerUrl    String?
    authorName String?
    authorUrl String?
    owner    User?   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId  String?
    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())
    media GameMedia[]
    versions GameVersion[]
    mods GameMod[]

    // @@fulltext([name])
    // @@fulltext([description])
}


enum SupporterSource {
    PATREON
    GITHUB
    WEBSITE
    OPEN_COLLECTIVE
    CONTRIBUTION
    OTHER
}

enum SupporterStatus {
    UNKNOWN
    ACTIVE
    INACTIVE
    BANNED
}

model Supporter {
    id      String @id @default(cuid())
    name    String
    source    SupporterSource @default(OTHER)
    url     String?

    months Int @default(0)
    score Int @default(0)

    status SupporterStatus @default(ACTIVE)

    isPublic Boolean @default(true)

    user    User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId  String? @unique

    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())
}

model Sponsor {
    id      String @id @default(cuid())
    title    String
    content    String
    url     String?
    coverUrl    String?
    bannerUrl    String?

    status SupporterStatus @default(ACTIVE)

    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())

    ads Ad[]
}

enum AdType {
    CHARITY
    AFFILIATE
    PAID
    OTHER
}

model Ad {
    id      String @id @default(cuid())
    title    String
    content    String
    url     String?
    coverUrl    String?
    bannerUrl    String?

    priority Int @default(0)

    type AdType @default(OTHER)

    startAt DateTime?
    endAt DateTime?

    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())

    sponsor Sponsor? @relation(fields: [sponsorId], references: [id], onDelete: Cascade)
    sponsorId String?
}


// TODO: Finish publisher when apps submition is live
// model Publisher {
//     id      String @id @default(cuid())
//     name    String
//     content    String
//     url     String?
//     imageUrl    String?

//     priority Int @default(0)

//     type AdType @default(OTHER)

//     startAt DateTime?
//     endAt DateTime?

//     updatedAt DateTime @updatedAt
//     createdAt DateTime @default(now())

//     user    User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
//     userId  String? 
// }